video.java

package com.example.vedio;

import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.MediaController;
import android.widget.SeekBar;
import android.widget.VideoView;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private VideoView videoView;
    private SeekBar seekBar;
    private MediaController mediaController;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize VideoView
        videoView = findViewById(R.id.videoView);
        videoView.setVideoURI(Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.vedio));

        // Initialize MediaController
        mediaController = new MediaController(this);
        mediaController.setAnchorView(videoView);
        videoView.setMediaController(mediaController);

        // Initialize SeekBar
        seekBar = findViewById(R.id.seekBar);
        seekBar.setMax(videoView.getDuration()); // Set maximum value of seekbar to the duration of the video
        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser) {
                    videoView.seekTo(progress); // Seek to the specified position when user drags the seekbar
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {}

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {}
        });
    }

    public void playVideo(View v) {
        videoView.start();
    }

    public void pauseVideo(View v) {
        videoView.pause();
    }

    public void stopVideo(View v) {
        videoView.stopPlayback();
        videoView.resume(); // Reset the video to the beginning
    }
}

xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FFBB86FC"
    android:orientation="vertical"
    android:theme="@style/Theme.AppCompat"
    tools:context=".MainActivity">

    <VideoView
        android:id="@+id/videoView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_margin="20dp"
        android:background="@color/black"
        android:orientation="horizontal"
        android:padding="10dp">

        <Button
            android:id="@+id/pause"
            style="@style/Widget.AppCompat.Button.Borderless.Colored"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="@android:drawable/ic_media_pause"
            android:onClick="pauseVideo" />

        <Button
            android:id="@+id/start"
            style="@style/Widget.AppCompat.Button.Borderless"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="@android:drawable/ic_media_play"
            android:onClick="playVideo" />

        <Button
            android:id="@+id/stop"
            style="@style/Widget.AppCompat.Button.Borderless"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="@android:drawable/ic_delete"
            android:onClick="stopVideo" />
    </LinearLayout>

    <SeekBar
        android:id="@+id/seekBar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_above="@id/pause"
        android:layout_marginStart="20dp"
        android:layout_marginEnd="20dp"
        android:layout_marginBottom="10dp" />
</RelativeLayout>

video recorder.java
package com.example.media2;

import android.content.Intent;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.IOException;

public class MainActivity extends AppCompatActivity implements SurfaceHolder.Callback {

    private MediaRecorder mediaRecorder;
    private SurfaceHolder surfaceHolder;
    private Button buttonRecord;
    private Button buttonPlayback;
    private boolean isRecording = false;
    private String outputFile;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        SurfaceView surfaceView = findViewById(R.id.surfaceView);
        surfaceHolder = surfaceView.getHolder();
        surfaceHolder.addCallback(this);

        buttonRecord = findViewById(R.id.button_record);
        buttonPlayback = findViewById(R.id.button_playback);

        outputFile = getExternalCacheDir().getAbsolutePath() + "/recorded_video.mp4";
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        surfaceHolder = holder;
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        if (isRecording) {
            stopRecording();
        }
        releaseMediaRecorder();
    }

    public void toggleRecording(View view) {
        if (!isRecording) {
            startRecording();
        } else {
            stopRecording();
        }
    }

    private void startRecording() {
        if (prepareMediaRecorder()) {
            try {
                mediaRecorder.start();
                isRecording = true;
                buttonRecord.setText("Stop Recording");
                buttonPlayback.setVisibility(View.GONE);
                Toast.makeText(this, "Recording started", Toast.LENGTH_SHORT).show();
            } catch (IllegalStateException e) {
                e.printStackTrace();
                releaseMediaRecorder();
                isRecording = false;
                buttonRecord.setText("Record");
                buttonPlayback.setVisibility(View.VISIBLE);
                Toast.makeText(this, "Failed to start recording", Toast.LENGTH_SHORT).show();
            }
        } else {
            Toast.makeText(this, "Failed to prepare MediaRecorder", Toast.LENGTH_SHORT).show();
        }
    }

    private void stopRecording() {
        try {
            mediaRecorder.stop();
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
            isRecording = false;
            buttonRecord.setText("Record");
            buttonPlayback.setVisibility(View.VISIBLE);
            Toast.makeText(this, "Recording stopped", Toast.LENGTH_SHORT).show();

            // After recording stops, move the recorded video to desired location
            saveVideoToGallery();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean prepareMediaRecorder() {
        mediaRecorder = new MediaRecorder();
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
        mediaRecorder.setVideoSize(320, 240); // Adjust size as needed
        mediaRecorder.setVideoFrameRate(30);
        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mediaRecorder.setOutputFile(outputFile);
        mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        mediaRecorder.setOrientationHint(90); // Set orientation
        try {
            mediaRecorder.prepare();
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            releaseMediaRecorder();
            return false;
        }
    }

    public void playbackVideo(View view) {
        VideoView videoView = findViewById(R.id.videoView);
        videoView.setVideoPath(outputFile);
        videoView.start();

        // Show the Exit button when video playback starts
        Button buttonExit = findViewById(R.id.button_exit);
        buttonExit.setVisibility(View.VISIBLE);
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        surfaceHolder = holder;

        // Set the preview display for the media recorder
        if (mediaRecorder != null) {
            mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        }
    }

    private void releaseMediaRecorder() {
        if (mediaRecorder != null) {
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
        }
    }

    private void saveVideoToGallery() {
        File source = new File(outputFile);
        File destination = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM), "RecordedVideos");

        if (!destination.exists()) {
            destination.mkdirs();
        }

        String destinationPath = destination.getAbsolutePath() + File.separator + "recorded_video.mp4";

        if (source.exists()) {
            source.renameTo(new File(destinationPath));

            // Add the video to the gallery so it's visible in the device's media player
            Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
            Uri uri = Uri.fromFile(new File(destinationPath));
            mediaScanIntent.setData(uri);
            sendBroadcast(mediaScanIntent);
        }
    }

    public void exitApp(View view) {
        finish(); // Close the activity
    }
}

Playback.java

package com.example.media2;


import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

public class Playback extends AppCompatActivity implements SurfaceHolder.Callback {

    private MediaRecorder mediaRecorder;
    private SurfaceHolder surfaceHolder;
    private Button buttonRecord;
    private Button buttonPlayback;
    private boolean isRecording = false;
    private String outputFile;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        SurfaceView surfaceView = findViewById(R.id.surfaceView);
        surfaceHolder = surfaceView.getHolder();
        surfaceHolder.addCallback(this);

        buttonRecord = findViewById(R.id.button_record);
        buttonPlayback = findViewById(R.id.button_playback);

        outputFile = getExternalCacheDir().getAbsolutePath() + "/recorded_video.mp4";
    }



    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        surfaceHolder = holder;
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        if (isRecording) {
            stopRecording();
        }
        releaseMediaRecorder();
    }

    public void toggleRecording(View view) {
        if (!isRecording) {
            startRecording();
        } else {
            stopRecording();
        }
    }

    private void startRecording() {
        if (prepareMediaRecorder()) {
            try {
                mediaRecorder.start();
                isRecording = true;
                buttonRecord.setText("Stop Recording");
                buttonPlayback.setVisibility(View.GONE);
                Toast.makeText(this, "Recording started", Toast.LENGTH_SHORT).show();
            } catch (IllegalStateException e) {
                e.printStackTrace();
                releaseMediaRecorder();
                isRecording = false;
                buttonRecord.setText("Record");
                buttonPlayback.setVisibility(View.VISIBLE);
                Toast.makeText(this, "Failed to start recording", Toast.LENGTH_SHORT).show();
            }
        } else {
            Toast.makeText(this, "Failed to prepare MediaRecorder", Toast.LENGTH_SHORT).show();
        }
    }

    private void stopRecording() {
        try {
            mediaRecorder.stop();
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
            isRecording = false;
            buttonRecord.setText("Record");
            buttonPlayback.setVisibility(View.VISIBLE);
            Toast.makeText(this, "Recording stopped", Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean prepareMediaRecorder() {
        mediaRecorder = new MediaRecorder();
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
        mediaRecorder.setVideoSize(320, 240); // Adjust size as needed
        mediaRecorder.setVideoFrameRate(30);
        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mediaRecorder.setOutputFile(outputFile);
        mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        mediaRecorder.setOrientationHint(90); // Set orientation
        try {
            mediaRecorder.prepare();
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            releaseMediaRecorder();
            return false;
        }
    }

    public void playbackVideo(View view) {
        VideoView videoView = findViewById(R.id.videoView);
        videoView.setVideoPath(outputFile);
        videoView.start();

        // Show the Exit button when video playback starts
        Button buttonExit = findViewById(R.id.button_exit);
        buttonExit.setVisibility(View.VISIBLE);
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        surfaceHolder = holder;

        // Set the preview display for the media recorder
        if (mediaRecorder != null) {
            mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        }
    }

    private void releaseMediaRecorder() {
        if (mediaRecorder != null) {
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
        }
    }
    public void exitApp(View view) {
        finish(); // Close the activity
    }
}

xml

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <SurfaceView
        android:id="@+id/surfaceView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp" />

    <TextView
        android:id="@+id/mediaController"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/media_controller_2"
        android:textSize="20sp"
        android:textStyle="bold"
        android:layout_above="@id/surfaceView"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp" />

    <VideoView
        android:id="@+id/videoView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:layout_below="@id/surfaceView"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp" />

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/videoView"
        android:layout_centerHorizontal="true"
        android:orientation="horizontal">

        <Button
            android:id="@+id/button_record"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/record"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="8dp"
            android:onClick="toggleRecording" />

        <Button
            android:id="@+id/button_playback"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/playback"
            android:visibility="gone"
            android:onClick="playbackVideo" />
    </LinearLayout>

    <Button
        android:id="@+id/button_exit"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/exit"
        android:layout_below="@id/button_playback"
        android:layout_marginTop="16dp"
        android:layout_centerHorizontal="true"
        android:visibility="gone"
        android:onClick="exitApp"
        tools:ignore="NotSibling" />

</RelativeLayout>





